@inject HttpClient _client
<EditForm Model="@post" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<fieldset disabled="@Disabled">
		<div class="form-group">
			<label>Title: </label>
			<div>
				<InputText @bind-Value="@post.Title" class="form-control" />
				<ValidationMessage For="@(() => post.Title)" />
			</div>
		</div>
		<div class="form-group">
			<label>Date Out: </label>
			<div>
				<InputDate @bind-Value="@post.Date" class="form-control" />
				<ValidationMessage For="@(() => post.Date)" />
			</div>
		</div>
		<div class="form-group">
			<label>Rating: </label>
			<div>
				<InputText @bind-Value="@post.Rating" class="form-control" />
				<ValidationMessage For="@(() => post.Rating)" />
			</div>
		</div>
		<div class="form-group">
			<label>Description: </label>
			<div>
				<InputText @bind-Value="@post.Description" class="form-control" />
				<ValidationMessage For="@(() => post.Description)" />
			</div>
		</div>
		<div class="form-group">
			<label>Reviewer: </label>
			<div>
				<InputSelect @bind-Value="post.ReviewerId" class="form-control">
					<option value="">-- Select Reviewer --</option>
					@if (Reviewers != null)
					{
						foreach (var reviewer in Reviewers)
						{
							<option value="@reviewer.Id">@reviewer.Name </option>
						}
					}
				</InputSelect>
				<ValidationMessage For="@(() =>post.ReviewerId )" />
			</div>
		</div>
	</fieldset>

	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}
	<BackToList Target="posts" />
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Post post { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	private IList<Reviewer> Reviewers;

	protected async override Task OnInitializedAsync()
	{
		Reviewers = await _client.GetFromJsonAsync<List<Reviewer>>($"{Endpoints.ReviewersEndpoint}");
		//booking.DateOut = DateTime.Now;
	}
}
